* Imports data from the census files (*.sf2) into their appropriate tables (pct1, pct2, ...)
* Requires that all of the census files are present including the pcakinglist:
* [State]2010.sf2.prd.packinglist.txt
*
* Census files should be copied into a QM Directory file named: [state]2010.sf2
* Originally WA's data was copied into census.wa but that's not a good naming convention.

prompt ' '
print "Enter state:":
input state

*open 'census.':state to census.file else print "Unable to open: census.":state; abort
open state:'2010.sf2' to census.file else print "Unable to open: census.":state; abort

read packing.list from census.file, state:'2010.sf2.prd.packinglist.txt' else
print 'Unable to read ':state:'2010.sf2.prd.packinglist.txt'
abort
end

table.start = 21 ;* start line for table data
table.end = 91 ;* end line
filename.start = 107 ;* start line for filename info. There is no defined end line like the tables.

tables = ''
for table = table.start to table.end
	* stored as [table]|[segment]:[cells]|
	packing.list<table> = swap(packing.list<table>,':','|') ;* standardize delimiters

	table.name		= field(packing.list<table>,'|',1)
	segment.file 	= field(packing.list<table>,'|',2)
	cells			= field(packing.list<table>,'|',3)

	tables<1,segment.file,-1> = table.name
	tables<2,segment.file,-1> = cells

next table

segment.files = ''
segment = filename.start
loop
	if index(packing.list<segment>, state:'geo', 1) eq 0 then  ;* skip the header & packing list
		segment.files<1,-1>		= field(packing.list<segment>,'|',1)	;* filename
		segment.files<2,-1>		= field(packing.list<segment>,'|',4)	;* row count
	end

	segment += 1
	until index(packing.list<segment>,'#',1) gt 0
repeat
debug 
segment.count = dcount(segment.files<1>,@VM)
for s = 1 to segment.count
	*	for each segment file iterate through the tables extracting/writing the data for the table
	*	from each line in the segment file. 

	read segment from census.file, segment.files<1,s> else print "Segment ":segment.files<1,s>:" not found."
	
	table.count = dcount(tables<1,s>,@SVM)
	line.count  = segment.files<2,s>
	table.field.start = 6 ;* initialize with number of standard ID fields
	
	print @(79*(s/segment.count),38):'>':@(-4):

	for t = 1 to table.count
		table.name = tables<1,s,t>
		table.num.fields  = tables<2,s,t>

		open table.name to table.file else
			execute \create.file \:table.name
			open table.name to table.file else print 'Unable to create ':table.name; abort
		end
		***************
		*execute \clear.file \:table.name ;* delete this once this process works!!!
		***************

		print @(21,39):table.name:


		for l = 1 to line.count
			
			print @(0,39):segment.files<1,s>:@(21,39):table.name:@(31,39):fmt(l,'5R'):' / ':line.count:
			
			id 			= swap(field(segment<l>,',',1,5), ',', '*')
			record.data = swap(field(segment<l>,',',table.field.start,table.num.fields), ',', @AM)
			write record.data on table.file, id			
		next l

		close table.file
		table.field.start += table.num.fields

	next t
	
next s


end
