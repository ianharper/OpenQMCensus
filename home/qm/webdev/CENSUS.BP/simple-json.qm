* PROGRAM simple-sjon.qm
* Designed to be used with list-csv.qm which functions like list but each attribute is 
* comma delimited. This program takes output of list-csv.qm and formats it for JSON.
* The resulting object is a simple JSON array. The name of the array is determined from
* The calling parameters. This can be run with an HTML query string as the arguments or
* from TCL using normal spaced arguments.
*
* Arguments:
* 	file=		File to read.
* 	fields=		CSV list of field names or numbers.
*
* Note: If field numbers are used then the resulting output will match ( 'f1' : [val1,val2] ).
* 		For more descrptive output use the dict id to output the display name.

equate program to 'simple-sjon.qm'
equate lprogram to 14

equate comma 	to \,\
equate quo 		to \"\
equate col		to \:\
equate lsb		to \[\
equate rsb		to \]\
equate lcb		to \{\
equate rcb 		to \}\
equate tab 		to char(9) ;* ASCII tab

tclread arguments
if index(arguments, '&',1) then
	words 	  = dcount(arguments,'&') ;* HTTP arguments are & delimited
	arguments = swap(arguments, '&',   ' ')
	arguments = swap(arguments, '%22', quo)
end 

words 	  = dcount(arguments,' ') ;* TCL arguments are ' ' delimited
arguments = swap(arguments, ' ', @AM)	
arguments = swap(arguments, '_',   ' ')
arguments = delete(arguments, 1)
arguments = swap(arguments, @AM, ' ')

execute \sselect \:arguments:\ by id.sort\ capturing output ;* just overwrite this.
execute \LIST-CSV.QM \:arguments capturing output
values 		= ''
rowCount = dcount(output, @AM)
for r = 1 to rowCount
	array = ''

* 	create jsonNameValue for the table id (ex: pct1)
	name 		= 'table'
	value  		= field(output<r>, tab, 1)
	gosub createJSONNameValue
	array<-1> 	= jsonNameValue
* 	create jsonNameValue for the table title (ex: total population)
	name 		= 'title'
	value 		= field(output<r>, tab, 2)
	lsbIndex 	= index(value, lsb, 1)
	value 		= value[1,lsbIndex - 2] : quo ;* gets rid of the column count from title.
	gosub createJSONNameValue
	array<-1> 	= jsonNameValue

* 	create the array of table id/titles
	gosub createJSONObject ;* array = jsonNameValue for table id and title
	values<-1> 	= jsonObj
next r

* make the table id/titles one obj.
name = 'tables' ;* values = all the jsonObj created in for loop.
gosub createJSONArray
array = jsonArray
gosub createJSONObject
display jsonObj



stop
* Begin Subroutines

* SUBROUTINE: createJSONArray
* This subroutine takes a dynamic array with a name and returns a JSON formatted array.
* The dynamic array should not be more than one level deep. All MV delimiters (AM, VM, SVM)
* will be converted to commas. This will flatten a MV array.
* 
* Requires: name (string), values (dynamic array)
* Sets:		jsonArray (string)
createJSONArray:
values = swap(values, @AM,  comma)
values = swap(values, @VM,  comma)
values = swap(values, @SVM, comma)
if values[1,1] ne lsb and values[1,1] ne lcb then values = quo : values : quo
values = lsb : values : rsb
jsonArray = quo : name : quo : col : values
return

* SUPROUTINE: createJSONNameValue
* This subroutine creates a JSON formatted Name Value string. Name and value are not
* modified. They should not include MV delimiters (AM, VM, SVM).
* 
* Requires: name (string), value (string)
* Sets: jsonNameValue
createJSONNameValue:
jsonNameValue 	= quo : name : quo : col
* if value[1,1] ne lsb and value[1,1] ne lcb then value = quo : value : quo
jsonNameValue  := value
return

* SUPROUTINE: createJSONObject
* This subroutine takes a dynmaic array of JSON values and/or arrys and returns a JSON
* formatted object. The array can be AM, VM, or SVM delimieed but it may use more than
* one. Using more than on MV delimiter will flatten the object.
* 
* Requires: array 	(dynamic array)
* Sets:		jsonObj (string)
createJSONObject:
array = swap(array, @AM,  comma)
array = swap(array, @VM,  comma)
array = swap(array, @SVM, comma)
jsonObj = lcb : array : rcb
return


end